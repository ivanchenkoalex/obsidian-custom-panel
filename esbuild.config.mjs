import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { readFileSync, mkdirSync, copyFileSync } from "fs";
import { join } from "path";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === 'production');
const manifest = JSON.parse(readFileSync('manifest.json', 'utf8'));
const outDir = prod ? join('dist', manifest.id) : '.';
const outFile = prod ? join(outDir, 'main.js') : 'main.js';
if (prod) {
    mkdirSync(outDir, { recursive: true });
}

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ['main.ts'],
	bundle: true,
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins],
	format: 'cjs',
	target: 'es2018',
	logLevel: "info",
	sourcemap: prod ? false : 'inline',
	treeShaking: true,
        outfile: outFile,
});

if (prod) {
        await context.rebuild();
        copyFileSync('manifest.json', join(outDir, 'manifest.json'));
        copyFileSync('styles.css', join(outDir, 'styles.css'));
        process.exit(0);
} else {
        await context.watch();
}

