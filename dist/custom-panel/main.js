/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CPanelPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  defaultBorderColor: "#cccccc",
  defaultBorderWidth: "1px",
  defaultBorderRadius: "8px",
  defaultBackground: "#ffffff",
  defaultHeaderBackground: "#f8f9fa",
  defaultHeaderTextColor: "var(--text-normal)",
  defaultHeaderHeight: "48px",
  defaultCollapsible: true,
  defaultCollapsed: false
};
var CPanelPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerMarkdownCodeBlockProcessor("cpanel", this.processCPanelBlock.bind(this));
    this.registerMarkdownPostProcessor(this.postProcessCPanel.bind(this));
    this.addSettingTab(new CPanelSettingTab(this.app, this));
    await this.addStyles();
  }
  onunload() {
    const styleElement = document.getElementById("cpanel-styles");
    if (styleElement) {
      styleElement.remove();
    }
  }
  async postProcessCPanel(el, ctx) {
    const codeBlocks = el.querySelectorAll("pre > code");
    for (let i = 0; i < codeBlocks.length; i++) {
      const codeBlock = codeBlocks[i];
      const text = codeBlock.textContent || "";
      if (text.startsWith("cpanel\n") || text.startsWith("cpanel ")) {
        const pre = codeBlock.parentElement;
        if (pre && pre.tagName === "PRE") {
          const lines = text.split("\n");
          const source = lines.slice(1).join("\n");
          const container = document.createElement("div");
          this.createPanel(container, {}, source, ctx);
          if (pre.parentNode) {
            pre.parentNode.replaceChild(container, pre);
          }
        }
      }
    }
  }
  async processCPanelBlock(source, el, ctx) {
    const lines = source.split("\n");
    const config = {};
    let contentStart = 0;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line === "---") {
        contentStart = i + 1;
        break;
      }
      if (line.includes(":")) {
        const [key, ...valueParts] = line.split(":");
        const value = valueParts.join(":").trim();
        config[key.trim()] = value;
      }
    }
    const content = lines.slice(contentStart).join("\n").trim();
    this.createPanel(el, config, content, ctx);
  }
  createPanel(container, config, content, ctx) {
    const title = config.title || "Custom Panel";
    const icon = config.icon || "";
    const borderColor = config.bordercolor || config.borderColor || this.settings.defaultBorderColor;
    const borderWidth = config.borderwidth || config.borderWidth || this.settings.defaultBorderWidth;
    const borderRadius = config.borderradius || config.borderRadius || this.settings.defaultBorderRadius;
    const background = config.background || this.settings.defaultBackground;
    const headerBackground = config.headerbackground || this.settings.defaultHeaderBackground;
    const headerTextColor = config.headertextcolor || config.headerTextColor || this.settings.defaultHeaderTextColor;
    const headerHeight = config.headerheight || config.headerHeight || this.settings.defaultHeaderHeight;
    const collapsible = config.collapsible !== void 0 ? config.collapsible === "true" : this.settings.defaultCollapsible;
    const collapsed = config.collapsed !== void 0 ? config.collapsed === "true" : this.settings.defaultCollapsed;
    const panel = container.createDiv({
      cls: "cpanel-container"
    });
    panel.style.border = `${borderWidth} solid ${borderColor}`;
    panel.style.borderRadius = borderRadius;
    panel.style.background = background;
    panel.style.overflow = "hidden";
    const header = panel.createDiv({
      cls: "cpanel-header"
    });
    header.style.background = headerBackground;
    header.style.color = headerTextColor;
    header.style.height = headerHeight;
    header.style.minHeight = headerHeight;
    header.style.padding = "0 16px";
    header.style.borderBottom = collapsed ? "none" : `1px solid ${borderColor}`;
    header.style.display = "flex";
    header.style.alignItems = "center";
    header.style.gap = "8px";
    if (collapsible) {
      header.style.cursor = "pointer";
      header.style.userSelect = "none";
    }
    if (icon) {
      const iconElement = header.createSpan({
        cls: "cpanel-icon"
      });
      if (icon.length <= 2 || /[\u{1f300}-\u{1f5ff}\u{1f900}-\u{1f9ff}\u{1f600}-\u{1f64f}\u{1f680}-\u{1f6ff}\u{2600}-\u{26ff}\u{2700}-\u{27bf}]/u.test(icon)) {
        iconElement.textContent = icon;
      } else {
        iconElement.innerHTML = `<svg class="lucide-icon"><use href="#${icon}"></use></svg>`;
      }
    }
    const titleElement = header.createSpan({
      text: title,
      cls: "cpanel-title"
    });
    titleElement.style.fontWeight = "600";
    titleElement.style.fontSize = "16px";
    titleElement.style.color = headerTextColor;
    let collapseIndicator = null;
    if (collapsible) {
      collapseIndicator = header.createSpan({
        cls: "cpanel-collapse-indicator"
      });
      collapseIndicator.style.marginLeft = "auto";
      collapseIndicator.style.transform = collapsed ? "rotate(-90deg)" : "rotate(0deg)";
      collapseIndicator.style.transition = "transform 0.2s ease";
      collapseIndicator.style.color = headerTextColor;
      collapseIndicator.innerHTML = "\u25BC";
    }
    const contentDiv = panel.createDiv({
      cls: "cpanel-content"
    });
    contentDiv.style.padding = "16px";
    contentDiv.style.display = collapsed ? "none" : "block";
    if (content) {
      const component = new import_obsidian.Component();
      import_obsidian.MarkdownRenderer.renderMarkdown(
        content,
        contentDiv,
        ctx.sourcePath || "",
        component
      );
    }
    if (collapsible && collapseIndicator) {
      header.addEventListener("click", () => {
        const isCurrentlyCollapsed = contentDiv.style.display === "none";
        if (isCurrentlyCollapsed) {
          contentDiv.style.display = "block";
          collapseIndicator.style.transform = "rotate(0deg)";
          header.style.borderBottom = `1px solid ${borderColor}`;
        } else {
          contentDiv.style.display = "none";
          collapseIndicator.style.transform = "rotate(-90deg)";
          header.style.borderBottom = "none";
        }
      });
    }
  }
  async addStyles() {
    const defaultStyles = `
            .cpanel-container {
                margin: 16px 0;
                font-family: var(--font-text);
            }

            .cpanel-header {
                transition: background-color 0.2s ease;
            }

            .cpanel-header:hover {
                filter: brightness(0.95);
            }

            .cpanel-icon {
                display: inline-flex;
                align-items: center;
                font-size: 16px;
            }

            .cpanel-title {
                color: var(--text-normal);
            }

            .cpanel-collapse-indicator {
                font-size: 12px;
                color: var(--text-muted);
            }

            .cpanel-content {
                color: var(--text-normal);
            }

            .cpanel-content > *:first-child {
                margin-top: 0;
            }

            .cpanel-content > *:last-child {
                margin-bottom: 0;
            }

            .lucide-icon {
                width: 16px;
                height: 16px;
            }
        `;
    let cssContent = defaultStyles;
    try {
      const cssPath = `.obsidian/plugins/${this.manifest.id}/styles.css`;
      const externalStyles = await this.app.vault.adapter.read(cssPath);
      cssContent = externalStyles;
      console.log("CPanel: Successfully loaded external styles.css");
    } catch (error) {
      console.log("CPanel: External styles.css not found, using default styles");
    }
    const style = document.createElement("style");
    style.textContent = cssContent;
    style.id = "cpanel-styles";
    document.head.appendChild(style);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var CPanelSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Custom Panel Settings" });
    new import_obsidian.Setting(containerEl).setName("Default Border Color").setDesc("Default color for panel borders").addText((text) => text.setPlaceholder("#cccccc").setValue(this.plugin.settings.defaultBorderColor).onChange(async (value) => {
      this.plugin.settings.defaultBorderColor = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Border Width").setDesc("Default width for panel borders").addText((text) => text.setPlaceholder("1px").setValue(this.plugin.settings.defaultBorderWidth).onChange(async (value) => {
      this.plugin.settings.defaultBorderWidth = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Border Radius").setDesc("Default border radius for panels").addText((text) => text.setPlaceholder("8px").setValue(this.plugin.settings.defaultBorderRadius).onChange(async (value) => {
      this.plugin.settings.defaultBorderRadius = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Panel Background").setDesc("Default background for panel content (supports colors, gradients, images)").addText((text) => text.setPlaceholder("#ffffff").setValue(this.plugin.settings.defaultBackground).onChange(async (value) => {
      this.plugin.settings.defaultBackground = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Header Background").setDesc("Default background for panel headers (supports colors, gradients, images)").addText((text) => text.setPlaceholder("#f8f9fa").setValue(this.plugin.settings.defaultHeaderBackground).onChange(async (value) => {
      this.plugin.settings.defaultHeaderBackground = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Header Text Color").setDesc("Default text color for panel headers").addText((text) => text.setPlaceholder("var(--text-normal)").setValue(this.plugin.settings.defaultHeaderTextColor).onChange(async (value) => {
      this.plugin.settings.defaultHeaderTextColor = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Header Height").setDesc("Default height for panel headers (e.g., 48px, 3rem, 60px)").addText((text) => text.setPlaceholder("48px").setValue(this.plugin.settings.defaultHeaderHeight).onChange(async (value) => {
      this.plugin.settings.defaultHeaderHeight = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Collapsible").setDesc("Make panels collapsible by default").addToggle((toggle) => toggle.setValue(this.plugin.settings.defaultCollapsible).onChange(async (value) => {
      this.plugin.settings.defaultCollapsible = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Collapsed State").setDesc("Start panels in collapsed state by default").addToggle((toggle) => toggle.setValue(this.plugin.settings.defaultCollapsed).onChange(async (value) => {
      this.plugin.settings.defaultCollapsed = value;
      await this.plugin.saveSettings();
    }));
  }
};
